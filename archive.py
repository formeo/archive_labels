from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib.colors import Color
import os

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
try:
    pdfmetrics.registerFont(TTFont('DejaVuSans', 'fonts/DejaVuSans.ttf'))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'fonts/DejaVuSans-Bold.ttf'))
    FONT_NAME = 'DejaVuSans'
    FONT_BOLD = 'DejaVuSans-Bold'
    print("‚úÖ –®—Ä–∏—Ñ—Ç—ã DejaVu –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except:
    FONT_NAME = 'Helvetica'
    FONT_BOLD = 'Helvetica-Bold'
    print("‚ö†Ô∏è  –®—Ä–∏—Ñ—Ç—ã DejaVu –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.")


class DocumentBox:
    def __init__(self, owner, doc_type, start_year, end_year, contents, box_number, style="modern"):
        self.owner = owner
        self.doc_type = doc_type
        self.start_year = start_year
        self.end_year = end_year
        self.contents = contents
        self.box_number = box_number
        self.style = style


def create_modern_label(pdf, box, x, y):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —ç—Ç–∏–∫–µ—Ç–∫—É"""
    width = 95 * mm  # –£–º–µ–Ω—å—à–∏–ª–∏ —à–∏—Ä–∏–Ω—É –¥–ª—è 2 —ç—Ç–∏–∫–µ—Ç–æ–∫ –≤ —Ä—è–¥
    height = 65 * mm  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è 4 —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –§–æ–Ω –∏ —Ä–∞–º–∫–∞
    pdf.setFillColorRGB(0.94, 0.97, 1.0)  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
    pdf.setStrokeColorRGB(0.18, 0.52, 0.67)  # –°–∏–Ω–∏–π
    pdf.setLineWidth(0.5)
    pdf.roundRect(x, y, width, height, 3 * mm, stroke=1, fill=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
    pdf.setFillColorRGB(0.18, 0.52, 0.67)  # –°–∏–Ω–∏–π
    pdf.setStrokeColorRGB(0.18, 0.52, 0.67)
    pdf.roundRect(x, y + height - 12 * mm, width, 12 * mm, 3 * mm, stroke=1, fill=1)

    pdf.setFillColorRGB(1, 1, 1)  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    pdf.setFont(FONT_BOLD, 10)
    pdf.drawCentredString(x + width / 2, y + height - 9 * mm, "–ê–†–•–ò–í")
    pdf.setFillColorRGB(0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã)
    pdf.setFont(FONT_NAME, 8)
    pdf.drawString(x + 5 * mm, y + height - 20 * mm, "–í–ª–∞–¥–µ–ª–µ—Ü:")
    pdf.setFont(FONT_BOLD, 9)
    pdf.drawString(x + 22 * mm, y + height - 20 * mm, _truncate_text(box.owner, 20))

    pdf.setFont(FONT_NAME, 8)
    pdf.drawString(x + 5 * mm, y + height - 27 * mm, "–¢–∏–ø:")
    pdf.setFont(FONT_BOLD, 8)
    pdf.drawString(x + 22 * mm, y + height - 27 * mm, _truncate_text(box.doc_type, 25))

    pdf.setFont(FONT_NAME, 8)
    pdf.drawString(x + 5 * mm, y + height - 34 * mm, "–ü–µ—Ä–∏–æ–¥:")
    pdf.setFont(FONT_BOLD, 8)
    period = f"{box.start_year}-{box.end_year}"
    pdf.drawString(x + 22 * mm, y + height - 34 * mm, period)

    pdf.setFont(FONT_NAME, 7)
    pdf.drawString(x + 5 * mm, y + height - 41 * mm, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:")

    # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    contents_text = _truncate_text(box.contents, 40)
    lines = _wrap_text(contents_text, pdf, FONT_NAME, 7, width - 10 * mm)
    for i, line in enumerate(lines[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏
        pdf.drawString(x + 5 * mm, y + height - (48 + i * 4) * mm, line)

    # –ù–æ–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏
    pdf.setFont(FONT_BOLD, 9)
    pdf.drawRightString(x + width - 5 * mm, y + 3 * mm, f"‚Ññ{box.box_number}")


def create_classic_label(pdf, box, x, y):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é —ç—Ç–∏–∫–µ—Ç–∫—É (–∫–æ–º–ø–∞–∫—Ç–Ω—É—é)"""
    width = 95 * mm
    height = 65 * mm

    # –†–∞–º–∫–∞
    pdf.setStrokeColorRGB(0, 0, 0)
    pdf.setLineWidth(0.3)
    pdf.rect(x, y, width, height)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.setFont(FONT_BOLD, 12)
    pdf.drawCentredString(x + width / 2, y + height - 8 * mm, "–ê–†–•–ò–í")

    # –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    pdf.line(x + 5 * mm, y + height - 10 * mm, x + width - 5 * mm, y + height - 10 * mm)

    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    pdf.setFont(FONT_NAME, 8)
    pdf.drawString(x + 5 * mm, y + height - 18 * mm, "–í–ª–∞–¥–µ–ª–µ—Ü:")
    pdf.setFont(FONT_BOLD, 8)
    pdf.drawString(x + 25 * mm, y + height - 18 * mm, _truncate_text(box.owner, 18))

    pdf.setFont(FONT_NAME, 7)
    pdf.drawString(x + 5 * mm, y + height - 25 * mm, "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    pdf.setFont(FONT_BOLD, 7)
    pdf.drawString(x + 5 * mm, y + height - 30 * mm, _truncate_text(box.doc_type, 30))

    pdf.setFont(FONT_NAME, 7)
    pdf.drawString(x + 5 * mm, y + height - 37 * mm, "–ü–µ—Ä–∏–æ–¥:")
    pdf.setFont(FONT_BOLD, 7)
    period = f"{box.start_year}-{box.end_year}"
    pdf.drawString(x + 22 * mm, y + height - 37 * mm, period)

    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ)
    pdf.setFont(FONT_NAME, 6)
    contents = _truncate_text(box.contents, 35)
    pdf.drawString(x + 5 * mm, y + height - 44 * mm, "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:")
    pdf.drawString(x + 5 * mm, y + height - 49 * mm, _truncate_text(contents, 40))

    # –ù–æ–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏
    pdf.setFont(FONT_NAME, 8)
    pdf.drawString(x + 5 * mm, y + 3 * mm, f"–ö–æ—Ä–æ–±–∫–∞ ‚Ññ{box.box_number}")


def _truncate_text(text, max_length):
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"""
    if len(text) > max_length:
        return text[:max_length - 3] + "..."
    return text


def _wrap_text(text, pdf, font_name, font_size, max_width):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫"""
    words = text.split()
    lines = []
    current_line = []

    for word in words:
        test_line = ' '.join(current_line + [word])
        if pdf.stringWidth(test_line, font_name, font_size) <= max_width:
            current_line.append(word)
        else:
            if current_line:
                lines.append(' '.join(current_line))
            current_line = [word]

    if current_line:
        lines.append(' '.join(current_line))

    return lines


def generate_pdf_compact(boxes, filename):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF —Å 4 —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    pdf = canvas.Canvas(filename, pagesize=A4)
    page_width, page_height = A4

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ (2x2 —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    labels_per_row = 2
    labels_per_column = 2
    labels_per_page = labels_per_row * labels_per_column

    label_width = 95 * mm
    label_height = 65 * mm

    # –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    margin_x = (page_width - (labels_per_row * label_width)) / 2
    margin_y = (page_height - (labels_per_column * label_height)) / 2

    for i, box in enumerate(boxes):
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if i > 0 and i % labels_per_page == 0:
            pdf.showPage()

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ —Å–µ—Ç–∫–µ
        page_index = i % labels_per_page
        row = page_index // labels_per_row
        col = page_index % labels_per_row

        x = margin_x + (col * label_width)
        y = margin_y + ((labels_per_column - 1 - row) * label_height)  # –°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑

        # –°–æ–∑–¥–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        if box.style == "classic":
            create_classic_label(pdf, box, x, y)
        else:
            create_modern_label(pdf, box, x, y)

    pdf.save()
    print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
    print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {(len(boxes) + labels_per_page - 1) // labels_per_page}")
    print(f"üè∑Ô∏è  –í—Å–µ–≥–æ —ç—Ç–∏–∫–µ—Ç–æ–∫: {len(boxes)}")


def main():
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–∏–∫–µ—Ç–æ–∫ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!
    boxes = [
        DocumentBox(owner="–í–∞–Ω—è", doc_type="–®–∫–æ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2015, end_year=2023,
                    contents="–¢–∞–±–µ–ª–∏, –¥–∏–ø–ª–æ–º—ã –æ–ª–∏–º–ø–∏–∞–¥, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
                    box_number=1, style="modern"),

        DocumentBox(owner="–°—Ç–µ–ø–∞", doc_type="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
                    start_year=2010, end_year=2022,
                    contents="–ö–∞—Ä—Ç—ã –∏–∑ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏, –ø—Ä–∏–≤–∏–≤–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
                    box_number=2, style="classic"),

        DocumentBox(owner="–°–µ–º–µ–π–Ω—ã–µ", doc_type="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2018, end_year=2024,
                    contents="–ö–≤–∏—Ç–∞–Ω—Ü–∏–∏ –ñ–ö–•, –Ω–∞–ª–æ–≥–æ–≤—ã–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏",
                    box_number=3, style="modern"),

        DocumentBox(owner="–ú–∞—Ä–∏—è", doc_type="–õ–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2005, end_year=2023,
                    contents="–ü–∞—Å–ø–æ—Ä—Ç, –¥–∏–ø–ª–æ–º—ã, —Ç—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞",
                    box_number=4, style="modern"),

        DocumentBox(owner="–†–∞–±–æ—Ç–∞", doc_type="–†–∞–±–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2018, end_year=2023,
                    contents="–î–æ–≥–æ–≤–æ—Ä—ã, –æ—Ç—á–µ—Ç—ã, —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏",
                    box_number=5, style="classic"),

        DocumentBox(owner="–î–∞—á–∞", doc_type="–î–∞—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2015, end_year=2023,
                    contents="–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã, –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, —Å—Ö–µ–º—ã",
                    box_number=6, style="modern"),

        DocumentBox(owner="–ê–≤—Ç–æ", doc_type="–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    start_year=2019, end_year=2024,
                    contents="–°–¢–°, –û–°–ê–ì–û, —Ç–∞–ª–æ–Ω—ã –¢–û",
                    box_number=7, style="classic"),

        DocumentBox(owner="–§–æ—Ç–æ", doc_type="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∞–ª—å–±–æ–º—ã",
                    start_year=2000, end_year=2023,
                    contents="–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ, –∞–ª—å–±–æ–º—ã, –Ω–µ–≥–∞—Ç–∏–≤—ã",
                    box_number=8, style="modern"),
    ]

    generate_pdf_compact(boxes, "archive_labels_compact.pdf")


if __name__ == "__main__":
    main()
